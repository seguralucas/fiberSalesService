package exit.services.principal;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import com.csvreader.CsvWriter;

import exit.services.convertidor.jsonAJson.ConvertirJsonAJson;
import exit.services.convertidos.csvAJson.AbstractJsonRestEstructura;
import exit.services.excepciones.ExceptionBiactiva;
import exit.services.fileHandler.CSVHandler;
import exit.services.principal.peticiones.AbstractHTTP;
import exit.services.principal.peticiones.EPeticiones;
import exit.services.principal.peticiones.GetExistFieldURLQueryRightNow;
import exit.services.principal.peticiones.GetExistsFieldInSales;
import exit.services.principal.peticiones.GetGenerico;
import exit.services.principal.peticiones.GetOracleSales;
import exit.services.principal.peticiones.GetOracleSalesContacts;
import exit.services.principal.peticiones.GetServiceListaEntidad;
import exit.services.principal.peticiones.PostGenerico;
import exit.services.principal.peticiones.UpdateGenericoRightNow;
import exit.services.singletons.ApuntadorDeEntidad;
import exit.services.singletons.ConfiguracionEntidadParticular;
import exit.services.singletons.RecEntAct;
import exit.services.util.ManejadorDateAPI;
import exit.services.util.json.JsonUtils;

public class Ejecutor {
	


	
	public Object ejecutorSalesAService(){
		ConfiguracionEntidadParticular r= RecEntAct.getInstance().getCep();
		AbstractHTTP get= new GetOracleSales(EPeticiones.GET,r.getUrlExtraer(),RecEntAct.getInstance().getCep().getCabeceraExtraer());
		return get.realizarPeticion(null,null,r.getParametrosUrl());		
	}
	
	public Object ejecutorSalesAServiceContacts(){
		ConfiguracionEntidadParticular r= RecEntAct.getInstance().getCep();
		AbstractHTTP get= new GetOracleSalesContacts(EPeticiones.GET,r.getUrlExtraer(),RecEntAct.getInstance().getCep().getCabeceraExtraer());
		return get.realizarPeticion(null,null,r.getParametrosUrl());		
	}
		
	public Object ejecutorServiceASales(){
		ConfiguracionEntidadParticular r= RecEntAct.getInstance().getCep();
		AbstractHTTP get= new GetServiceListaEntidad(EPeticiones.GET,r.getUrlExtraer(),RecEntAct.getInstance().getCep().getCabeceraExtraer());
		return get.realizarPeticion(null,null,r.getParametrosUrl());		
	}
	
	public Object ejecutorServiceASalesContactos() throws Exception{
		ConfiguracionEntidadParticular r= RecEntAct.getInstance().getCep();
		GetGenerico getGenerico= new GetGenerico(EPeticiones.GET, r.getUrlExtraer(), RecEntAct.getInstance().getCep().getCabeceraExtraer());
		JSONArray jsonArray= (JSONArray) getGenerico.realizarPeticion(null,null,r.getParametrosUrl());		
		for(int i=0;i<jsonArray.size();i++){
			JSONObject jsonActual= (JSONObject)jsonArray.get(i);
			Long id = (Long)((JSONObject)(jsonActual)).get("id");
			JSONObject jsonContaco=(JSONObject)getGenerico.realizarPeticion(String.valueOf(id));
			String url=r.getUrlVerificarExistencia(jsonContaco);
			String idSales=null;
			if(url!=null){
				GetExistsFieldInSales get = new GetExistsFieldInSales(EPeticiones.GET, url, r.getCabeceraInsertar());
				idSales=(String)get.realizarPeticion();
			}
			ConvertirJsonAJson conv= new ConvertirJsonAJson(r,jsonContaco);
			AbstractJsonRestEstructura resultadoContacto=conv.convertir();
			if(idSales==null){
				this.getMailServices(id,resultadoContacto.getJson());
			}
		}
		return 0;
	}
	
	private void getMailServices(Long idContactoService, JSONObject jsonContactoAInsertar){
		ConfiguracionEntidadParticular r= RecEntAct.getInstance().getCep();
		JSONArray mailSalida= new JSONArray();
		GetGenerico getListaEmails = new GetGenerico(EPeticiones.GET, r.getUrlExtraer()+"/"+idContactoService+"/emails", r.getCabeceraExtraer());
		JSONArray jsonEmails = (JSONArray) getListaEmails.realizarPeticion();
		for(int i=0;i<jsonEmails.size();i++){
			JSONObject jsonObj=(JSONObject)jsonEmails.get(i);
			String urlEmail=jsonObj.get("href").toString();
			char idMail=urlEmail.charAt(urlEmail.length()-1);
			if(idMail=='0' || idMail=='1'){
				JSONObject jsonMailParticular=(JSONObject)getListaEmails.realizarPeticion(String.valueOf(idMail));
				String mail=(jsonMailParticular.get("address").toString());
				JSONObject jsonMailSalida= new JSONObject();
				jsonMailSalida.put("address", mail);
				jsonMailSalida.put("id", Integer.parseInt(idMail));
				
			}
		}
	}
		
	private void escribirExcepcion(Exception e, AbstractJsonRestEstructura jsonEst){
		e.printStackTrace();
		try {
			CSVHandler.getInstance().escribirErrorException(e);
			CSVHandler.getInstance().escribirCSV("error_no_espeficado.csv", jsonEst.getLine());
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	}

	public Object ejecutar(String nombreMetodo,AbstractJsonRestEstructura jsonEst) throws ExceptionBiactiva{
		ApuntadorDeEntidad.getInstance().siguienteEntidad();
		return ejecutar(nombreMetodo,null,jsonEst);
	}
	
	public Object ejecutar(String nombreMetodo, String parametros) throws ExceptionBiactiva{
		return ejecutar(nombreMetodo,parametros,null);
	}
	
	public Object ejecutar(String nombreMetodo, String parametros, AbstractJsonRestEstructura jsonEst) throws ExceptionBiactiva{
		Class<Ejecutor> a= Ejecutor.class;
		try {
			Method m;
			Object o;
			if(parametros!=null){
				if(jsonEst!=null){
					m= a.getMethod(nombreMetodo, parametros.getClass(),AbstractJsonRestEstructura.class);
					o=m.invoke(this,parametros,jsonEst);
				}
				else{
					m= a.getMethod(nombreMetodo, parametros.getClass());
					o=m.invoke(this,parametros);				}
			}
			else{
				if(jsonEst!=null){
					m=a.getMethod(nombreMetodo,AbstractJsonRestEstructura.class);
					o=m.invoke(this,jsonEst);
				}
				else{
					m=a.getMethod(nombreMetodo);
					o=m.invoke(this);
				}
			}
			return o;
		} catch (Exception e) {
			e.printStackTrace();
			CSVHandler.getInstance().escribirErrorException(e);
			throw new ExceptionBiactiva("Error al ejecutar ejecutor");
		} 
	}
}
