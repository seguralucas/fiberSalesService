package exit.services.principal.peticiones;

import java.io.BufferedReader;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import exit.services.convertidor.jsonAJson.ConvertirJsonAJson;
import exit.services.convertidos.csvAJson.AbstractJsonRestEstructura;
import exit.services.singletons.ConfiguracionEntidadParticular;
import exit.services.singletons.RecEntAct;
import exit.services.singletons.RecuperadorPropierdadesJson;
import exit.services.util.json.JsonUtils;

public class GetOracleSalesContacts extends AbstractHTTP {




	public GetOracleSalesContacts(EPeticiones peticion, String url, JSONObject cabecera) {
		super(peticion, url, cabecera);
	}

	@Override
	protected Object procesarPeticionOK(BufferedReader in, String id, int responseCode) throws Exception {
		return null;
	}

	@Override
	protected Object procesarPeticionError(BufferedReader in, String id, int responseCode) throws Exception {
		return null;
	}

	@Override
	protected Object procesarPeticionOK(BufferedReader in, int responseCode) throws Exception {
		ConfiguracionEntidadParticular r=RecEntAct.getInstance().getCep();
		JSONArray jArray= super.getJsonArrayDondeIterar(r.getIterarSobre(), in);
		
		for(int i=0;i<jArray.size();i++){
			JSONObject jsonActual=(JSONObject)jArray.get(i);
			ConvertirJsonAJson conv= new ConvertirJsonAJson(r,jsonActual);
			AbstractJsonRestEstructura resultadoContacto=conv.convertir();
			String urlFianl=r.getUrlVerificarExistencia((JSONObject)jArray.get(i));
			String idContacto=null;
			if(urlFianl!=null){
				GetExistFieldURLQueryRightNow get = new GetExistFieldURLQueryRightNow(EPeticiones.GET,urlFianl,r.getCabeceraInsertar());
				idContacto=(String)get.realizarPeticion();
			}
			String tipoContacto=(String)jArray.get(i).get("PersonDEO_TipoDeContacto_c");
			if(idContacto==null){
				PostGenerico post= new PostGenerico(EPeticiones.POST,r.getUrlInsertar(),r.getCabeceraInsertar());
				addContactType(tipoContacto,null,resultadoContacto);
				System.out.println(resultadoContacto);
//				post.realizarPeticion( resultadoContacto );
			}
			else{
				GetGenerico getGenerico = new GetGenerico(EPeticiones.GET, r.getUrlInsertar(), r.getCabeceraInsertar());
				JSONObject jsonContactoService=(JSONObject)getGenerico.realizarPeticion(idContacto);
				addContactType(tipoContacto,jsonContactoService,resultadoContacto);
				System.out.println(resultadoContacto);
				
			}
			System.out.println("************");
		}
		
		return jArray.size();
	}
		
	private void addContactType(String tipoContacto, JSONObject jsonContacto, JSONObject jsonContactoAInsertar) throws Exception{
		if(tipoContacto==null)
			return ;
		Long idContactType=mapeoContactTypeSalesAService(tipoContacto);
		JSONObject informacionContactType= JsonUtils.convertir("{\"id\":"+idContactType+"}");

		if(jsonContacto==null){
			jsonContactoAInsertar.put("contactType", informacionContactType);
			return;
		}
		JSONObject contactType=(JSONObject)jsonContacto.get("contactType");
		if(contactType==null){
			jsonContactoAInsertar.put("contactType", informacionContactType);
			return ;
		}
		if(idContactType.equals(((Long)contactType.get("id"))))
			return ;
		
		JSONObject jsonCustomFields=(JSONObject)jsonContacto.get("customFields");
		if(jsonCustomFields==null)
			return;
		JSONObject jsonCO=(JSONObject)jsonCustomFields.get("CO");
		if(jsonCO==null)
			return;
		for(int i=1;i<=2;i++){		
			contactType=(JSONObject)jsonCO.get("contact_type"+i);
			if(contactType==null){
				JSONObject aux= new JSONObject();
				JSONObject aux2= new JSONObject();
				aux.put("contact_type"+i,idContactType );
				aux2.put("CO",aux );
				jsonContactoAInsertar.put("customFields",aux2 );
				return ;
			}
			if(idContactType.equals(((Long)contactType.get("id"))))
				return ;
		}

	}
	public static void main(String[] args) throws Exception {
		GetOracleSalesContacts get = new GetOracleSalesContacts(EPeticiones.GET, "aa", null);
		JSONObject a=JsonUtils.convertir("{\"contactType\":{\"id\":2},\"customFields\":{\"CO\":{\"contact_type1\":{\"id\":1},\"contact_type2\":null}}}");
		JSONObject b= JsonUtils.convertir("{}");
//		JSONObject b=JsonUtils.convertir("{\"customFields\":{\"CO\":{\"contact_type1\":{\"id\":2}}}}");
		get.addContactType("TIPOC4",null,b);
		System.out.println(b);
	}
	private Long mapeoContactTypeSalesAService(String contactType){
		if(contactType.equalsIgnoreCase("TIPOC1"))
			return 1L;
		else if(contactType.equalsIgnoreCase("TIPOC2"))
			return 2L;
		else if(contactType.equalsIgnoreCase("TIPOC3"))
			return 3L;
		else if(contactType.equalsIgnoreCase("TIPOC4"))
			return 4L;
		else if(contactType.equalsIgnoreCase("TIPOC5"))
			return 5L;
		return null;
	}
	@Override
	protected Object procesarPeticionError(BufferedReader in, int responseCode) throws Exception {
		System.out.println("Error aca");
		return null;
	}

	@Override
	protected Object procesarPeticionOK(BufferedReader in, AbstractJsonRestEstructura json, int responseCode)
			throws Exception {
		return null;
	}

	@Override
	protected Object procesarPeticionError(BufferedReader in, AbstractJsonRestEstructura json, int responseCode)
			throws Exception {
		return null;
	}

	@Override
	protected Object procesarPeticionOK(BufferedReader in, AbstractJsonRestEstructura json, String id, int responseCode)
			throws Exception {
		return null;
	}

	@Override
	protected Object procesarPeticionError(BufferedReader in, AbstractJsonRestEstructura json, String id,
			int responseCode) throws Exception {
		return null;
	}


	
	

	

}
