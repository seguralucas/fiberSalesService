package biactiva.services.convertidos.csvAJson;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import biactiva.services.fileHandler.CSVHandler;
import biactiva.services.fileHandler.ConstantesGenerales;
import biactiva.services.principal.peticiones.AbstractHTTP;
import biactiva.services.principal.peticiones.EPeticiones;
import biactiva.services.principal.peticiones.GetExistFieldURLQueryRightNow;
import biactiva.services.principal.peticiones.GetExistsFieldInSales;
import biactiva.services.procesadorJson.IProcesadorJson;
import biactiva.services.procesadorJson.JsonProcesarReemplazo;
import biactiva.services.singletons.ApuntadorDeEntidad;
import biactiva.services.singletons.ConfiguracionEntidadParticular;
import biactiva.services.singletons.RecEntAct;
import biactiva.services.singletons.RecuperadorFormato;
import biactiva.services.singletons.RecuperadorPropierdadesJson;
import biactiva.services.util.json.JsonUtils;

public abstract class AbstractJsonRestEstructura extends JSONObject{
	protected String line;	//Si es el JSON es generado por CSV se guarda la línea que lo generó
	protected HashMap<String, Object> mapCabeceraValor;	
	protected String cabeceraCSV; //Si es el JSON es generado por CSV se guarda la cabecera que lo generó
	
	abstract public void agregarCampo(String cabecera, String valor) throws Exception;
	abstract public boolean validarCampos();
//	abstract public JSONHandler createJson() throws Exception;
	abstract protected Object alterarValor(String cabecera, String valor) throws Exception;


	
	public AbstractJsonRestEstructura() throws Exception {
		super(JsonUtils.convertir(RecEntAct.getInstance().getCep().getRecuperadorFormato().getJsonFormato().toString()));
		mapCabeceraValor= new HashMap<String, Object>();
	}
	
	public AbstractJsonRestEstructura(JSONObject json) throws Exception {
		super(JsonUtils.convertir(json.toString()));
		mapCabeceraValor= new HashMap<String, Object>();
	}
	
	public HashMap<String, Object> getMapCabeceraValor(){
		return mapCabeceraValor;
	}
	
	protected void insertarValorMap(String cabecera, String valor) throws Exception{
		getMapCabeceraValor().put(cabecera, alterarValor(cabecera,valor));
	} 
	
	protected void insertarValorJson(String cabecera, String valor) throws Exception{ 

		Object valorAlterado=alterarValor(cabecera,valor);
		if(valorAlterado!=null && RecEntAct.getInstance().getCep().getRecuperadorPropiedadesJson().isGetIdFromUrl(cabecera)){
			valorAlterado=getIdFromUrl(valorAlterado,cabecera);
			if(valorAlterado!=null)
				System.out.println("sadadgadhgadh849*/--sadadgadhgadh849*/--sadadgadhgadh849*/--sadadgadhgadh849*/--sadadgadhgadh849*/--sadadgadhgadh849*/--sadadgadhgadh849*/--sadadgadhgadh849*/--sadadgadhgadh849*/--sadadgadhgadh849*/--sadadgadhgadh849*/--sadadgadhgadh849*/--sadadgadhgadh849*/--sadadgadhgadh849*/--");
		}
		if(valorAlterado==null && RecEntAct.getInstance().getCep().getRecuperadorPropiedadesJson().isBorrarSiEsNull(cabecera))
			borrarKey(cabecera);
		else{
			JsonProcesarReemplazo jpr= new JsonProcesarReemplazo(valorAlterado,cabecera,RecEntAct.getInstance().getCep());
			recorrerJSON(this,jpr);
		}
	}
	
	protected void recorrerJSON(JSONObject jsonObj, IProcesadorJson procesadorJson ) {
	    for (Object key : jsonObj.keySet()) {
	        String keyStr = (String)key;
	        Object keyvalue = jsonObj.get(keyStr);
	        if (keyvalue instanceof JSONObject)
	        	recorrerJSON((JSONObject)keyvalue,procesadorJson);
	        else if(keyvalue instanceof JSONArray)
	        	recorrerJSON((JSONArray)keyvalue,procesadorJson);
	        else
	        	procesadorJson.procesarJson(jsonObj, keyStr);
	        }
	}
	
	protected void recorrerJSON(JSONArray jsonArr, IProcesadorJson procesadorJson ){
		for(int i=0;i<jsonArr.size();i++){
			Object value=jsonArr.get(i);
	        if (value instanceof JSONObject)
	        	recorrerJSON((JSONObject)value,procesadorJson);
	        else if(value instanceof JSONArray)
	        	recorrerJSON((JSONArray)value,procesadorJson);
		    else
	        	procesadorJson.procesarJson(jsonArr, i);
		}
	}
	
	protected Boolean insertarTrueOFalse(String valor){
		if(valor == null)
			return null;
		if (valor.equalsIgnoreCase("si") || valor.equalsIgnoreCase("true") || valor.equalsIgnoreCase("verdadero"))
			return true;
		else if(valor.equalsIgnoreCase("no") || valor.equalsIgnoreCase("false") || valor.equalsIgnoreCase("falso"))
			return false;
		else 
			return null;
	}
	

	protected String insertarFecha(String valor){
		final String PATH_ERROR="error_formato_fecha.csv";
		if(valor==null || valor.length()==0)
			return null;
		String[] fecha=valor.split("/");
		if(fecha.length==3){
			try{
				return fecha[2]+"-"+fecha[0]+"-"+fecha[1];
			}
			catch(Exception e){
				try {
					CSVHandler.getInstance().escribirCSV(PATH_ERROR, this.getLine());
				} catch (IOException e1) {
					e1.printStackTrace();
				}
				return null;
			}
		}
		fecha=valor.split("-");
		if(fecha.length!=3)
			return null;
		else
			return valor;
	}
	
	protected void borrarCabecera(String cabecera){
		
	}
	
	
	private HashMap<String, ArrayList<Integer>> indiciesBorrados= new HashMap<>();
	private Integer indiceRelativoAOtrosBorrados(String key,Integer indice){
		if(!indiciesBorrados.containsKey(key)){
			ArrayList<Integer> listaIndices= new ArrayList<>();
			listaIndices.add(indice);
			indiciesBorrados.put(key, listaIndices);
			return indice;
		}
		ArrayList<Integer> listaIndices=indiciesBorrados.get(key);
		listaIndices.add(indice);
		Integer resultado= new Integer(indice);
		for(Integer aux:listaIndices){
			if(indice.compareTo(aux)>0){
				resultado--;
			}
		}
		return resultado;
	}
	protected Object getIdFromUrl(Object valor, String cabecera){
		try{
			JSONObject json=RecEntAct.getInstance().getCep().getRecuperadorPropiedadesJson().getIdFromUrl(cabecera);
			String identificador=RecEntAct.getInstance().getCep().getIdentificadorAtributo();
			String url= json.get("url").toString();
			String claseExtractora= json.get("claseExtractora").toString();
			JSONObject cabeceraPeticion= JsonUtils.convertir(json.get("cabecera").toString());
			url=url.replaceAll(identificador+cabecera+identificador, valor.toString());
			AbstractHTTP get=null;
			if(claseExtractora.equalsIgnoreCase("GetExistFieldURLQueryRightNow"))
					get= new GetExistFieldURLQueryRightNow(EPeticiones.GET, url, cabeceraPeticion);
		//	System.out.println(get.realizarPeticion());
			return get.realizarPeticion();
		}catch(Exception e){
			e.printStackTrace();
			CSVHandler.getInstance().escribirErrorException("warning_procesamiento.txt",e);
			return null;
		}
	}

	protected void borrarKey(String cabecera){
		try{ 
		if(RecEntAct.getInstance().getCep().getRecuperadorPropiedadesJson().isBorrarSiEsNull(cabecera)){
			String[] recorrido=RecEntAct.getInstance().getCep().getRecuperadorPropiedadesJson().getBorrarSiEsNull(cabecera).split("\\.");
			JSONObject aux= this;
			JSONArray auxArray;
			for(int i=0;i<recorrido.length;i++){
				if(i+1==recorrido.length){
					if(recorrido[i].matches(".*\\[[0-9]\\]$")){
						String key=recorrido[i].substring(0, recorrido[i].indexOf("["));
						Integer indice=Integer.parseInt(recorrido[i].substring(recorrido[i].indexOf("[")+1,recorrido[i].indexOf("]")));
						auxArray=(JSONArray)aux.get(key);
						indice= indiceRelativoAOtrosBorrados(key,indice);
						auxArray.remove((indice.intValue()));
						if(auxArray.size()==0)
							aux.remove(key);
					}
					else
						aux.remove(recorrido[i]);
				}
				else{
					aux=(JSONObject)aux.get(recorrido[i]);
					if(recorrido[i].matches(".*\\[[0-9]\\]$")){
						auxArray=(JSONArray)aux.get(recorrido[i].substring(0, recorrido[i].length()-3));
						aux.get(Character.getNumericValue(recorrido[i].charAt(recorrido[i].length() - 2)));
					}
				}
			}
		}
		}
		catch(Exception e){
			e.printStackTrace();
			try{
				CSVHandler.getInstance().escribirCSV("error_borrar_key.txt", "Error al intentar eliminar llave por valor nulo");
				CSVHandler.getInstance().escribirCSV("error_borrar_key.txt", "Elemento causante: "+cabecera);
				CSVHandler.getInstance().escribirCSV("error_borrar_key.txt", "Valor: "+RecEntAct.getInstance().getCep().getRecuperadorPropiedadesJson().getBorrarSiEsNull(cabecera));
				CSVHandler.getInstance().escribirCSV("error_borrar_key.txt", "Operacion sobre el registro no detenida");
				CSVHandler.getInstance().escribirCSV("error_borrar_key.txt", ConstantesGenerales.SEPARADOR_ERROR_TRYCATCH);
			}
			catch(Exception a){
				a.printStackTrace();
			}
		}
	}
	

	
	protected String insertarString(String valor){
		if(valor == null || valor.length()==0)
			return null;
		return valor;
	}
	
	protected String procesarFecha(String cabecera, String valor){
		return insertarFecha(valor);
	}
	
	private String formatearStringFechaQBE(String cabecera, String valor) throws Exception{
		if(!RecEntAct.getInstance().getCep().getRecuperadorPropiedadesJson().isFormatearStringFechaQBE(cabecera))
			return valor;
		if(valor==null || valor.length()==0)
			return null;
		String[] fecha=valor.split("/");
		if(fecha.length==3){
			try{
				return fecha[2]+"-"+fecha[1]+"-"+fecha[0];
			}
			catch(Exception e){
				throw new Exception("Error generico de fecha");
			}
		}
		fecha=valor.split("-");
		if(fecha.length!=3){
			throw new Exception("El formato de la fecha es invalido. Deben ser tres digitos separados por guiones medios o barras");
		}
		else
			return valor;
	}
	
	public String remplazarTildes(String cabecera,String valor) {
		if(!RecEntAct.getInstance().getCep().getRecuperadorPropiedadesJson().isReemplazarCarEspanol(cabecera))
			return valor;
	    String original = "áàäéèëíìïóòöúùuñÁÀÄÉÈËÍÌÏÓÒÖÚÙÜÑçÇ";
	    String ascii = "aaaeeeiiiooouuunAAAEEEIIIOOOUUUNcC";
	    String output = valor;
	    for (int i=0; i<original.length(); i++) {
	        output = output.replace(original.charAt(i), ascii.charAt(i));
	    }
	    return output;
	    
	}
	
	public String valorPorDefault(String cabecera,String valor) {
		if(!RecEntAct.getInstance().getCep().getRecuperadorPropiedadesJson().isValorPorDefault(cabecera))
			return valor;
		if(valor==null || valor.length()==0)
			return RecEntAct.getInstance().getCep().getRecuperadorPropiedadesJson().getValorPorDefault(cabecera);
		return valor;
	}
	
	
	
	
	public String agregar10Ceros(String cabecera,String valor) {
		if(!RecEntAct.getInstance().getCep().getRecuperadorPropiedadesJson().isCompletar10Ceros(cabecera))
			return valor;
		for(int i=valor.length();i<10;i++)
			valor="0"+valor;
		return valor;
	}

	protected String procesarCadena(String cabecera, String valor) throws Exception{
		valor=agregar10Ceros(cabecera,valor);
		valor=borrarCaracteresNoNumericos(cabecera,valor);
		valor=remplazarTildes(cabecera,valor);
		valor=valorPorDefault(cabecera,valor);
		valor=formatearStringFechaQBE(cabecera,valor);
		if(valor==null || valor.length()==0)
			return null;
		return valor;
	}
	
	protected String borrarCaracteresNoNumericos(String cabecera, String valor){
		if(RecEntAct.getInstance().getCep().getRecuperadorPropiedadesJson().isBorrarCarNoNumericos(cabecera))
			valor=valor.replaceAll("[^0-9]", "");
		return valor;		
	}
	
	protected Long procesarEntero(String cabecera, String valor){
		valor=borrarCaracteresNoNumericos(cabecera,valor);
		if(valor==null || valor.length()==0)
			return null;
		
		return Long.parseLong(valor.trim());
	}
	
	
	public String getLine(){
		return line;
	}
	public void setLine(String line){
		this.line=line;
	}
	

	public JSONObject getJsonFormato() {
		return (JSONObject)this;
	}
	
	public String getLineaDesdeFormatoJson(){
		HashMap<String, Object> mp=getMapCabeceraValor();
	    Iterator it = mp.entrySet().iterator();
	    StringBuilder sb= new StringBuilder();
	    while (it.hasNext()) {
	        Map.Entry pair = (Map.Entry)it.next();
	        sb.append(pair.getValue()+RecEntAct.getInstance().getCep().getSeparadorCSV());
	    }
	    String salida=sb.toString();
	    String linea= salida.substring(0, salida.length()-1);
	    return linea;
	}
	
	public String getCabeceraDesdeFormatoJson(){
		HashMap<String, Object> mp=getMapCabeceraValor();
	    Iterator it = mp.entrySet().iterator();
	    StringBuilder sb= new StringBuilder();
	    while (it.hasNext()) {
	        Map.Entry pair = (Map.Entry)it.next();
	        sb.append(pair.getKey()+RecEntAct.getInstance().getCep().getSeparadorCSV());
	    }
	    String salida=sb.toString();
	    String linea= salida.substring(0, salida.length()-1);
	    return linea;
	}

	@Override
	public String toString() {
		return super.toString().replace("\\", "").replace(",", ",\n");
	}
	
	public String toStringSinEnter(){
		return super.toString().replace("\\", "");
	}
	
	public String toStringNormal(){
		return super.toString();
	}
	public ConfiguracionEntidadParticular getConfEntidadPart() {
		return RecEntAct.getInstance().getCep();
	}
	public String getCabeceraCSV() {
		return cabeceraCSV;
	}
	public void setCabeceraCSV(String cabeceraCSV) {
		this.cabeceraCSV = cabeceraCSV;
	}
	public JSONObject getJson() {
		return this;
	}

	public static void main(String[] args) {
		System.out.println(new Integer(0).compareTo(new Integer(2)));
	}
	
	
}
